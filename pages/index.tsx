import type { GetStaticProps, NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import useTodoItems from '../utils/useTodoItems'
import TodoItem from '../components/TodoItem'
import PlusIcon from '../components/PlusIcon'
import { FilterBar } from '../components/FilterBar'
import { TodoItem as TodoItemType } from '../types/data'
import { useState, useEffect, useRef, ChangeEvent } from 'react'
import { format, addDays } from 'date-fns'
import type { Filter, Sorter } from '../types/utilTypes'

type Props = {
  initialTodoItems: TodoItemType[]
}

export const getStaticProps: GetStaticProps<Props> = async () => {

  const { getTodoItems } = useTodoItems()
  return {
    props: {
      initialTodoItems: getTodoItems()
    }
  }
}

const Home: NextPage<Props> = ({ initialTodoItems: todoItemsInit }) => {

  const [newTodoTitle, setNewTodoTitle] = useState<string>()

  const [editTodoItem, setEditTodoItem] = useState<TodoItemType>()

  const [todoItems, setTodoItems] = useState<TodoItemType[]>([])

  const [filter, setFilter] = useState<Filter>('')
  // this doesn't work
  // const prevFilter = usePrevious<Filter>(filter)
  const [sorter, setSorter] = useState<Sorter>('')
  // this doesn't work
  // const prevSorter = usePrevious<Sorter>(sorter)
  /** sorted and filtered todoItems (original todoItems is *not* mutated)*/
  const proceccedTodoItems = todoItems
    .slice() // because Array.prototype.sort mutates original array!
    .sort((itemA, itemB) => {
      switch (sorter) {
        case 'タイトル':
          return itemA.title.length - itemB.title.length
        case '日付':
          if (itemA.dueDate > itemB.dueDate) return -1
          else if (itemA.dueDate < itemB.dueDate) return 1
          else return 0
        case '':
          console.log('sorter:', sorter)
          return 0
      }
    })
    .filter((item) => {
      switch (filter) {
        case '':
          return true
        case '完了':
          return item.isDone === true
        case '未完了':
          return item.isDone === false
      }
    })

  const inputRef = useRef<HTMLInputElement>(null)

  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    setNewTodoTitle(e.target.value)
  }

  /**
   * add new todoItem and reset input
   * by clicking plus icon or press enter key
   * @returns 
   */
  const onClickAddButton = () => {
    if (!newTodoTitle) return
    const newTodoItem: TodoItemType = {
      id: format(new Date(), 'yyyyMMddhhmmss'),
      title: newTodoTitle,
      isDone: false,
      dueDate: format(addDays(new Date(), 1), 'yyyyMMdd')
    }
    setTodoItems([...todoItems, newTodoItem])
    setNewTodoTitle('')
    // inputの値を初期化する
    inputRef.current!.value = ''
  }

  /**
   * delete clicked todoId
   * @param todoId deleted todo's id
   */
  const deleteTodo = (todoId: string) => {
    const deleteIndex = todoItems.findIndex(v => {
      return v.id === todoId
    })
    setTodoItems(todoItems.filter((_, i) => i !== deleteIndex))
    // ↓this doesn't work (item at wrong index is deleted :(  )
    // setTodos(todoItems.splice(deleteIndex, 1))
    //  because splice returns [deleteindex : deleteIndex + 1] array
    //  and pass it to setTodos.
    //  And you must not mutate states by method other than setState.
  }

  /**
   * editing todo
   * @param todoId id of todoItem gonna be edited 
   */
  const onClickEditButton = (todoId: string) => {
    setEditTodoItem(todoItems.find(v => v.id === todoId))
  }

  /** update todo with newTodoTitle */
  const onClickUpdateButton = (todoId: string, newTodoTitle: string) => {
    console.log('todoId:' + todoId)
    console.log('newTodoTitle:' + newTodoTitle)
    setTodoItems(todoItems.map(v => {
      if (v.id === editTodoItem?.id) {
        v.title = newTodoTitle
        return v
      }
      return v
    }))
    setEditTodoItem(undefined)
  }

  /** switch `done` and `not yet` by clicking check icon */
  const toggleTodo = (todoId: string) => {
    console.log("todoId:" + todoId)
    setTodoItems(todoItems.map(v => {
      if (v.id === todoId) {
        v.isDone = !v.isDone
        console.log("v.isDone:" + v.isDone)
        return v
      }
      return v
    }))
  }

  /** switching filter */
  const toggleFilter = (nextFilter: Filter) => {
    // this doesn't work
    // if(prevFilter === filter) setFilter('')
    if (nextFilter === filter) setFilter('')
    else setFilter(nextFilter)
  }

  /** switching sorter */
  const toggleSorter = (nextSorter: Sorter) => {
    // this doesn't work
    // if(prevSorter === sorter) setSorter('')
    if (nextSorter === sorter) setSorter('')
    else setSorter(nextSorter)
  }

  // 初期表示処理(コンポーネントがマウントされたあとに走る)
  useEffect(() => {
    setTodoItems(todoItemsInit)
  }, [])

  return (
    <div className="py-0 px-8">
      <Head>
        <title>react-todo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={'m-0 text-6xl'}>
          Welcome to my 
          <span 
          className={'mx-4 bg-black text-white'}>TODO</span>
          app!
        </h1>

        <p className={'mt-16 mx-0 mb-4 text-4xl'}>
          Type what you <b>will</b> do.
        </p>

        <div className='italic'>
          <ul>
            <li>- 生活を豊かにする</li>
            <li>- 開発者もユーザも快適</li>
            <li>- 義務感よりも、攻めの姿勢と楽しさを</li>
          </ul>
        </div>

        <div className='flex justify-center items-center
                        mx-4 mb-16 w-2/5'>
          {/* plus icon */}
          <button onClick={onClickAddButton}>
            <PlusIcon />
          </button>
          <input
            ref={inputRef}
            className='text-5xl p-4
              border-b-4 border-zinc-500 outline-none text-zinc-500 italic
              placeholder-zinc-300 placeholder:italic caret-cyan-700'
            type="text"
            placeholder='e.g. Buy tomato'
            onChange={(e) => onInputChange(e)}
            onKeyDown={(e) => {
              if (e.key === 'Enter') onClickAddButton()
            }
            } />
        </div>

        <FilterBar
          filter={filter}
          sorter={sorter}
          toggleFilter={toggleFilter}
          toggleSorter={toggleSorter} />

        <div className="flex items-center justify-center flex-col max-w-3xl">
          {proceccedTodoItems
            .map((todoItem, i) => {
              return (
                <TodoItem
                  todoItem={todoItem}
                  key={i}
                  onDelete={deleteTodo}
                  onEdit={onClickEditButton}
                  isEditing={editTodoItem?.id === todoItem.id}
                  onUpdate={onClickUpdateButton}
                  onToggle={toggleTodo} />
              )
            })}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
