import type { GetStaticProps, NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import useTodoItems from '../utils/useTodoItems'
import TodoItem from '../components/TodoItem'
import PlusIcon from '../components/PlusIcon'
import { TodoItem as TodoItemType } from '../types/data'
import { useState, useEffect, useRef, ChangeEvent } from 'react'
import { format, addDays } from 'date-fns'

type Props = {
  initialTodoItems: TodoItemType[]
}

export const getStaticProps: GetStaticProps<Props> = async () => {

  const { getTodoItems } = useTodoItems()
  return {
    props: {
      initialTodoItems: getTodoItems()
    }
  }
}

const Home: NextPage<Props> = ({ initialTodoItems: todoItemsInit }) => {

  const [newTodoTitle, setNewTodoTitle] = useState<string>()

  const [editTodoItem, setEditTodoItem] = useState<TodoItemType>()

  const [todoItems, setTodoItems] = useState<TodoItemType[]>([])

  const inputRef = useRef<HTMLInputElement>(null)

  /**
   * When Enter key pressed, add Todo Item.
   * @param e 
   */
  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    setNewTodoTitle(e.target.value)
  }

  const onClickAddButton = () => {
    if (!newTodoTitle) return
    const newTodoItem: TodoItemType = {
      id: format(new Date(), 'yyyyMMddhhmmss'),
      title: newTodoTitle,
      isDone: false,
      dueDate: format(addDays(new Date(), 1), 'yyyyMMdd')
    }
    setTodoItems([...todoItems, newTodoItem])
    setNewTodoTitle('')
    // inputの値を初期化する
    inputRef.current!.value = ''
  }

  const deleteTodo = (todoId: string) => {
    const deleteIndex = todoItems.findIndex(v => {
      return v.id === todoId
    })
    setTodoItems(todoItems.filter((_, i) => i !== deleteIndex))
    // ↓this doesn't work (item at wrong index is deleted :(  )
    //  because splice returns [deleteindex : deleteIndex + 1] array
    //  and pass it to setTodos.
    //  And you must not mutate states by method other than setState.
    // setTodos(todoItems.splice(deleteIndex, 1))
  }

  const onClickEditButton = (todoId: string) => {
    setEditTodoItem(todoItems.find(v => v.id === todoId))
  }

  const updateTodo = (todoId: string, newTodoTitle: string) => {
    console.log('todoId:' + todoId)
    console.log('newTodoTitle:' + newTodoTitle)
    setTodoItems(todoItems.map(v => {
      if (v.id === editTodoItem?.id) {
        v.title = newTodoTitle
        return v
      }
      return v
    }))
    setEditTodoItem(undefined)
  }

  const toggleTodo = (todoId: string) => {
    console.log("todoId:" + todoId)
    setTodoItems(todoItems.map(v => {
      if(v.id === todoId){
        v.isDone = !v.isDone
        console.log("v.isDone:" + v.isDone)
        return v
      }
      return v
    }))
  } 

  // 初期表示処理(コンポーネントがマウントされたあとに走る)
  useEffect(() => {
    setTodoItems(todoItemsInit)
  }, [])

  return (
    <div className="py-0 px-8">
      <Head>
        <title>react-todo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Type what you wanna do.
        </p>

        <div className='flex justify-center items-center
                        mx-4 mb-16 w-2/5'>
          {/* plus icon */}
          <div onClick={onClickAddButton}>
            <PlusIcon/>
          </div>
          <input
            ref={inputRef}
            className='text-5xl p-4
              border-b-4 border-zinc-500 outline-none text-zinc-500 italic
              placeholder-zinc-300 placeholder:italic caret-cyan-700'
            type="text"
            placeholder='e.g. Buy tomato'
            onChange={(e) => onInputChange(e)} />
        </div>

        <div className="flex items-center justify-center flex-col max-w-3xl">
          {todoItems
            .sort((a, b) => {
              if (a.title.length > b.title.length) return 1
              else if (a.title.length < b.title.length) return -1
              else return 0
            })
            .map((todoItem, i) => {
            return (
              <TodoItem
                todoItem={todoItem}
                key={i} 
                onDelete={deleteTodo}
                onEdit={onClickEditButton}
                isEditing={editTodoItem?.id === todoItem.id}
                onUpdate={updateTodo}
                onToggle={toggleTodo}/>
            )
          })}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
